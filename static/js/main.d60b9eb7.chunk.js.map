{"version":3,"sources":["components/nav/index.js","components/background/index.js","components/cards/index.js","components/footer/index.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","className","children","Title","Refresh","Score","Background","CharacterCard","alt","name","src","image","occupation","location","onClick","removeFriend","id","Footer","App","state","dbz","removeCharacter","_this","filter","setState","_this2","this","background","map","cards","key","footer","Component","Boolean","window","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"g6EAIA,SAASA,EAAOC,GACZ,OAAOC,EAAAC,EAAAC,cAAA,MAAIC,UAAU,UAAUJ,EAAMK,UAEzC,SAASC,EAAMN,GACb,OAAOC,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAASJ,EAAMK,UAGtC,SAASE,EAAQP,GACb,OAAOC,EAAAC,EAAAC,cAAA,MAAIC,UAAU,WAAWJ,EAAMK,UAG1C,SAASG,EAAMR,GACf,OAAOC,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAASJ,EAAMK,gBCTrBI,MAJf,SAAoBT,GAClB,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAcJ,EAAMK,iBCyB7BK,MA1Bf,SAAuBV,GACrB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,OAAKQ,IAAKX,EAAMY,KAAMC,IAAKb,EAAMc,SAEnCb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,uBADF,IAC0BH,EAAMY,MAEhCX,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,6BADF,IACgCH,EAAMe,YAEtCd,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,2BADF,IAC8BH,EAAMgB,YAIxCf,EAAAC,EAAAC,cAAA,QAAMc,QAAS,kBAAMjB,EAAMkB,aAAalB,EAAMmB,KAAKf,UAAU,UAA7D,wBCfSgB,MAJf,SAAgBpB,GACd,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAUJ,EAAMK,0BCgEzBgB,6MAzDbC,MAAQ,CACNC,SAGFC,gBAAkB,SAAAL,GAChB,IAAMI,EAAME,EAAKH,MAAMC,IAAIG,OAAO,SAAAH,GAAG,OAAIA,EAAIJ,KAAOA,IACpDM,EAAKE,SAAS,CAACJ,iFAGR,IAAAK,EAAAC,KACP,OACE5B,EAAAC,EAAAC,cAAC2B,EAAD,KAEE7B,EAAAC,EAAAC,cAACJ,EAAD,KACIE,EAAAC,EAAAC,cAACI,EAAD,UACAN,EAAAC,EAAAC,cAACG,EAAD,oBACAL,EAAAC,EAAAC,cAACK,EAAD,YAGHqB,KAAKP,MAAMC,IAAIQ,IAAI,SAAAR,GAAG,OACrBtB,EAAAC,EAAAC,cAAC6B,EAAD,CACER,gBAAiBI,EAAKJ,gBACtBL,GAAII,EAAIJ,GACRc,IAAKV,EAAIJ,GACTP,KAAMW,EAAIX,KACVE,MAAOS,EAAIT,MACXC,WAAYQ,EAAIR,WAChBC,SAAUO,EAAIP,aAIlBf,EAAAC,EAAAC,cAAC+B,EAAD,KACEjC,EAAAC,EAAAC,cAAA,gDAlCQgC,aCGEC,QACW,cAA7BC,OAAOrB,SAASsB,UAEe,UAA7BD,OAAOrB,SAASsB,UAEhBD,OAAOrB,SAASsB,SAASC,MACvB,2DCZNC,IAASC,OAAOxC,EAAAC,EAAAC,cAACuC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.d60b9eb7.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\n\nfunction Header(props) {\n    return <h1 className=\"header\">{props.children}</h1>;\n  };\nfunction Title(props) {\n  return <h1 className=\"title\">{props.children}</h1>;\n};\n\nfunction Refresh(props) {\n    return <h2 className=\"refresh\">{props.children}</h2>;\n};\n\nfunction Score(props) {\nreturn <h3 className=\"score\">{props.children}</h3>;\n};\n\n  export { Header, Title, Refresh, Score };","import React from \"react\";\nimport \"./style.css\";\n\nfunction Background(props) {\n  return <div className=\"Background\">{props.children}</div>;\n}\n\nexport default Background;","import React from \"react\";\nimport \"./style.css\";\n\nfunction CharacterCard(props) {\n  return (\n    <div className=\"card\">\n      <div className=\"img-container\">\n        <img alt={props.name} src={props.image} />\n      </div>\n      <div className=\"content\">\n        <ul>\n          <li>\n            <strong>Name:</strong> {props.name}\n          </li>\n          <li>\n            <strong>Occupation:</strong> {props.occupation}\n          </li>\n          <li>\n            <strong>Location:</strong> {props.location}\n          </li>\n        </ul>\n      </div>\n      <span onClick={() => props.removeFriend(props.id)} className=\"remove\">\n        ùòÖ\n      </span>\n    </div>\n  );\n}\n\nexport default CharacterCard;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Footer(props) {\n  return <div className=\"Footer\">{props.children}</div>;\n}\n\nexport default Footer;","import React, { Component } from 'react';\n\nimport {Header,Title, Refresh, Score} from './components/nav';\nimport Background from \"./components/background\";\nimport CharacterCard from \"./components/cards\";\nimport Footer from \"./components/footer\";\nimport './App.css';\nimport dbz from \"./dbz.json\";\n\nclass App extends Component {\n\n  state = {\n    dbz\n  };\n\n  removeCharacter = id => {\n    const dbz = this.state.dbz.filter(dbz => dbz.id !== id);\n    this.setState({dbz});\n  };\n\n  render() {\n    return (\n      <Background>\n        \n        <Header>\n            <Refresh>R</Refresh>\n            <Title>Clicky Game</Title>\n            <Score>99</Score>\n        </Header>\n\n        {this.state.dbz.map(dbz => (\n          <CharacterCard\n            removeCharacter={this.removeCharacter}\n            id={dbz.id}\n            key={dbz.id}\n            name={dbz.name}\n            image={dbz.image}\n            occupation={dbz.occupation}\n            location={dbz.location}\n          />\n          ))}\n\n        <Footer>\n          <p>Clicky Game &copy; Copyright</p>\n        </Footer>\n      </Background>\n\n      \n      // <div className=\"App\">\n      //   <header className=\"App-header\">\n      //     <img src={logo} className=\"App-logo\" alt=\"logo\" />\n      //     <p>\n      //       Edit <code>src/App.js</code> and save to reload.\n      //     </p>\n      //     <a\n      //       className=\"App-link\"\n      //       href=\"https://reactjs.org\"\n      //       target=\"_blank\"\n      //       rel=\"noopener noreferrer\"\n      //     >\n      //       Learn React\n      //     </a>\n      //   </header>\n      // </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}